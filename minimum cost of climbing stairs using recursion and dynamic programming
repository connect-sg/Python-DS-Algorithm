#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 10 10:14:02 2021

@author: siddharthgehlot
"""

#cost of climbing stairs

cost =[10,15,30]
# as 1 or 2 steps can be taken in one go optimal cost for last step will be min(cost(last),cost(last-1))
steps = 3

# using recusrion
def optimalSolutionRecursion(cost,n):
     if n==0 or n==1:
         return cost[n]
     
     return min(cost[n]+optimalSolutionRecursion(cost,n-2),optimalSolutionRecursion(cost,n-1))
 
    
print(optimalSolutionRecursion(cost,2)) 


dp=[None]*len(cost)


#using dynamic programming
def optimalSolutionDp(cost,n,dp):
    if n==0 or n==1:
        dp[n]=cost[n]
        
    if dp[n]!=None:
        return dp[n]
    
    dp[n]= min(cost[n]+optimalSolutionDp(cost,n-2,dp),optimalSolutionDp(cost,n-1,dp))
               
    return dp[n]
           
print(optimalSolutionDp(cost,2,dp))
