#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 12 10:48:32 2021

@author: siddharthgehlot
"""

#merge k sorted array


#1,4,5
#1,3,4
#2,6
class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.head = None
            
    def insertEnd(self,data):
         if self.head is None:
             self.head = Node(data)
         else:
             val = self.head 
             while val.next is not None:
                 val = val.next 
                 
             val.next = Node(data)    
          
    def traverse(self):
         printval = self.head 
         while printval is not None:
             print(printval.data)
             printval = printval.next 
    def mergeList(self, r1, r2,ll3):
            
            if r1 is None and r2 is None:
                return ll3    
        
            if r1.data>=r2.data:
              ll3.insertEnd(r2.data)  
              if r2.next:  
                self.mergeList(r1,r2.next,ll3)
              else:
                  while r1 is not None:
                      ll3.insertEnd(r1.data)
                      r1 = r1.next
              
            else:
              ll3.insertEnd(r1.data)  
              if r1.next:  
                self.mergeList(r1.next,r2,ll3)
              else:
                  while r2 is not None:
                      ll3.insertEnd(r2.data)
                      r2 = r2.next  
            
            return ll3 
    def mergeKlist(self,lists,ll3,i):
              if i>=len(lists)-1:
                  return ll3
              
              ll3 = self.mergeList(lists[i].head,lists[i+1].head,ll3)
                 
              
            
              return self.mergeKlist(lists,ll3,i+1)
        
if __name__=='__main__':
    ll1 = LinkedList()
    ll1.insertEnd(1)
    ll1.insertEnd(2)
    ll1.insertEnd(3)
    ll1.insertEnd(4)
    ll1.insertEnd(5)  
    
    ll2 = LinkedList()
    ll2.insertEnd(1)
    ll2.insertEnd(3)
    ll2.insertEnd(4)
    
    ll4 = LinkedList()
    ll4.insertEnd(7)
    ll4.insertEnd(9)
    ll4.insertEnd(10)
    
    ls = [ll1,ll2,ll4]
    ll3 = LinkedList() 
    ll3.mergeKlist(ls,ll3,0)
    ll3.traverse()
        