#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep  8 16:49:11 2021

@author: siddharthgehlot
"""

#max depth of a binary tree

class Node:
    def __init__(self,data,parent):
        self.data = data
        self.leftChild = None
        self.rightChild = None
        self.parent = parent
        self.visited = False
class BinarySearchTree:
    def __init__(self):
         self.root = None
         
    def insert(self,data):
        insertNode = Node(data,None)
        if self.root is None:
            self.root = insertNode 
        else:
            self.insertData(self.root,data)
            
    def insertData(self,node,data):
         if data>node.data:
             if node.rightChild:
                 self.insertData(node.rightChild,data)
             else:
                 node.rightChild = Node(data,node)
         else:
             if node.leftChild:
                 self.insertData(node.leftChild,data)
             else:
                 node.leftChild = Node(data,node)
                 
                 
    def maxdepth(self):
         if self.root is None:
               return 0
         else:
             return self.dfs(self.root)
        

    def dfs(self,node):
        depth = 0
        maxdepth = 0
        stack = [node]
        
        while stack:
            
            actval = stack.pop()
            actval.visited = True
            
            depth +=1
            
            if actval.leftChild:
                stack.append(actval.leftChild)
                
            if actval.rightChild:
                stack.append(actval.rightChild)
            
            #print(depth)
            if actval.leftChild is None and actval.rightChild is None:
                if depth>maxdepth:
                    maxdepth = depth
                depth=0    
        return maxdepth        
            
                
            


             
    def traversenodes(self):
           if self.root is None:
               return 
           else:
               self.traverse(self.root)
    def traverse(self,value):
        
        
        if value.leftChild:
              self.traverse(value.leftChild)
        print(value.data)
        if value.rightChild:
              self.traverse(value.rightChild)  
              
              
              
if __name__=='__main__':
       bst = BinarySearchTree()
       bst.insert(5)
       bst.insert(3)
       bst.insert(2)
       bst.insert(8)
       bst.insert(10)
       bst.insert(13)
       bst.traversenodes()   
       print(bst.maxdepth())           
              