#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 12 09:32:20 2021

@author: siddharthgehlot
"""

#linked list cycle

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.head = None
    def insert(self,data):
        insertData = Node(data)
        if self.head is None:
            self.head = Node(data)
        else:
            insertData.next = self.head
            self.head = insertData
          
    def traverse(self):
         printval = self.head 
         while printval is not None:
             print(printval.data)
             printval = printval.next 
             
    def createCycle(self,n):
           val = self.head 
           last = self.head
           N=0
           
           while val is not None and N<n:
               val = val.next
               N+=1
           while last.next is not None:
              last = last.next
           print(last.data,val.data)
           last.next = val 
    def detectCycle(self):
         pt1 = self.head 
         pt2 = self.head
         
         while pt1 is not None:
             N=0
             while pt2 is not None and N<2:
                 pt2 =pt2.next
                 N+=1
             pt1 = pt1.next 
             
             if pt1==pt2 and pt1 is not None and pt2 is not None:
                 
                 return True
         return False
        
           
             
             
if __name__=='__main__':
    ll1 = LinkedList()
    ll1.insert(4)
    ll1.insert(2)
    ll1.insert(1)
    ll1.insert(3)
    ll1.insert(8)
    ll1.insert(10)
 
    ll1.createCycle(3)
    print(ll1.detectCycle())
    
    #ll1.traverse()
              