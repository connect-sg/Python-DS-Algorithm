#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 18 10:07:16 2021

@author: siddharthgehlot
"""

#doubly linked list

class Node:
    def __init__(self,data):
        self.data = data
        self.left = None
        self.right =None

class DoublyLinkedList:
    def __init__(self):
       self.head = None
       self.tail = None
      
    #insert data at start in the  doubly linked list
    def insertStart(self, data):
        insertNode = Node(data)
        if self.head is None:
            self.head = insertNode
            self.tail = insertNode
    
        else:
           insertNode.right = self.head
           self.head.left = insertNode
           self.head = insertNode

    #insert dat a at the end in the doubly linked list
    
    def insertEnd(self, data):
        insertNode = Node(data)
        if self.head is None:
            self.head = insertNode
            self.tail = insertNode
        else:
            value = self.head 
            while value is not None:
                act_val = value
                value = value.right
            self.tail = insertNode    
            value = insertNode    
            act_val.right = value
            value.left = act_val
            
    
    
    #remove data at the start
    def removeStart(self):
         
         value = self.head
         self.head = value.right
         value.right = None
           
    
    
    #remove data at the end
    
    def removeEnd(self):
        value = self.tail
        self.tail = value.left
        self.tail.right = None
        value = None
    
    
    #remove data in between
    
    def removeBTW(self,data):
        value = self.head
        while value is not None and value.data!=data:
            act_val = value
            value = value.right
            prev = value.left
        if value.data==data:
            act_val.right = value.right
            prev.left = act_val 
            value = None
            
            
            
    
    #traverse through doubly linked list in forward(f) or backward(b) direction
    
    def traverse(self,direction = 'f'):
       if direction == 'f': 
           printval = self.head
           while printval is not None:
               print(printval.data)
            
               printval = printval.right
       elif direction =='b':
           printval = self.tail 
           while printval is not None:
               print(printval.data)
            
               printval = printval.left  
            
if __name__=='__main__':
     dll = DoublyLinkedList()
     dll.insertStart(5)
     dll.insertStart(10)
     dll.insertEnd(19)
     dll.insertStart(1)
     dll.insertEnd(0)
     dll.removeStart()
     dll.removeEnd()
     dll.removeBTW(5)
     dll.traverse()       